%%
clear;
outputDir = 'C:\Users\Ryan\Documents\MATLAB\gratings-task-analysis\processed_data\LFP_GRATINGS_SUMMARY';
ref = 'CAR';
v = 12;

saveFileName = sprintf('%s/allSessions-lfpAnalysisSummary-%s-v%d.mat', outputDir, ref, v);
load(saveFileName);
outputDir = 'C:\Users\Ryan\Documents\MATLAB\gratings-task-analysis\processed_data\GRC';

%%
cols = lines(6);
dPulCol = cols(3,:);
vPulCol = cols(5,:);

p3Col = [0.9 0 0];
p1Col = [0 0 0.9];

if strcmp(ref, 'BIP')
    relPowYBounds = [-0.55 0.1];
    sfcCTDelayYBoundsLF = [0.035 0.065];
    sfcCTDelayYBoundsHF = [0.0125 0.03];
elseif strcmp(ref, 'CAR')
    relPowYBounds = [-1.5 0.2];
    sfcCTDelayYBoundsLF = [0.035 0.07];
    sfcCTDelayYBoundsHF = [0.015 0.03];
end


isInPulvinar = isInDPulvinar | isInVPulvinar;

%% plot power in cue-target delay allPul P3 vs P1
channelCond = isInPulvinar;
nChannel = sum(channelCond);
cueTargetDelayRelPowerLF = [cueTargetDelayPowerP3LF(channelCond,:); cueTargetDelayPowerP1LF(channelCond,:)] ./ ...
        [baselinePowerLF(channelCond,:); baselinePowerLF(channelCond,:)];
cueTargetDelayRelPowerHF = [cueTargetDelayPowerP3HF(channelCond,:); cueTargetDelayPowerP1HF(channelCond,:)] ./ ...
        [baselinePowerHF(channelCond,:); baselinePowerHF(channelCond,:)];
p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];

grcPlotLfpPower2(cueTargetDelayRelPowerLF, cueTargetDelayRelPowerHF, fAxisLF, fAxisHF, p3p1Logical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [relPowYBounds; relPowYBounds], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Power Rel. to Baseline (dB/Hz)', ...
        'titleText', '', ...
        'doDB', 1);

plotFileName = sprintf('%s/allSessions-ctDelayRelPowerDB-pul-P3vsP1-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

% %% plot power in cue-target delay dPul P3 vs P1
% channelCond = isInDPulvinar;
% nChannel = sum(channelCond);
% cueTargetDelayRelPowerLF = [cueTargetDelayPowerP3LF(channelCond,:); cueTargetDelayPowerP1LF(channelCond,:)] ./ ...
%         [baselinePowerLF(channelCond,:); baselinePowerLF(channelCond,:)];
% cueTargetDelayRelPowerHF = [cueTargetDelayPowerP3HF(channelCond,:); cueTargetDelayPowerP1HF(channelCond,:)] ./ ...
%         [baselinePowerHF(channelCond,:); baselinePowerHF(channelCond,:)];
% p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];
% 
% grcPlotLfpPower2(cueTargetDelayRelPowerLF, cueTargetDelayRelPowerHF, fAxisLF, fAxisHF, p3p1Logical, ...
%         'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
%         'yBounds', [relPowYBounds; relPowYBounds], ...
%         'cols', [p3Col; p1Col], ...
%         'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
%         'ylabelText', 'Power Rel. to Baseline (dB/Hz)', ...
%         'titleText', '', ...
%         'doDB', 1);
% 
% plotFileName = sprintf('%s/allSessions-ctDelayRelPowerDB-dPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
% fprintf('Saving to %s...\n', plotFileName);
% export_fig(plotFileName, '-nocrop');
% 
% %% plot power in cue-target delay vPul P3 vs P1
% channelCond = isInVPulvinar;
% nChannel = sum(channelCond);
% cueTargetDelayRelPowerLF = [cueTargetDelayPowerP3LF(channelCond,:); cueTargetDelayPowerP1LF(channelCond,:)] ./ ...
%         [baselinePowerLF(channelCond,:); baselinePowerLF(channelCond,:)];
% cueTargetDelayRelPowerHF = [cueTargetDelayPowerP3HF(channelCond,:); cueTargetDelayPowerP1HF(channelCond,:)] ./ ...
%         [baselinePowerHF(channelCond,:); baselinePowerHF(channelCond,:)];
% p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];
% 
% grcPlotLfpPower2(cueTargetDelayRelPowerLF, cueTargetDelayRelPowerHF, fAxisLF, fAxisHF, p3p1Logical, ...
%         'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
%         'yBounds', [relPowYBounds; relPowYBounds], ...
%         'cols', [p3Col; p1Col], ...
%         'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
%         'ylabelText', 'Power Rel. to Baseline (dB/Hz)', ...
%         'titleText', '', ...
%         'doDB', 1);
% 
% plotFileName = sprintf('%s/allSessions-ctDelayRelPowerDB-vPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
% fprintf('Saving to %s...\n', plotFileName);
% export_fig(plotFileName, '-nocrop');

%% plot power in array response allPul P3 vs P1
channelCond = isInPulvinar;
nChannel = sum(channelCond);
arrayResponseHoldRelPowerLF = [arrayResponseHoldPowerP3LF(channelCond,:); arrayResponseHoldPowerP1LF(channelCond,:)] ./ ...
        [baselinePowerLF(channelCond,:); baselinePowerLF(channelCond,:)];
arrayResponseHoldRelPowerHF = [arrayResponseHoldPowerP3HF(channelCond,:); arrayResponseHoldPowerP1HF(channelCond,:)] ./ ...
        [baselinePowerHF(channelCond,:); baselinePowerHF(channelCond,:)];
p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];

grcPlotLfpPower2(arrayResponseHoldRelPowerLF, arrayResponseHoldRelPowerHF, fAxisLF, fAxisHF, p3p1Logical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [relPowYBounds; relPowYBounds], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Power Rel. to Baseline (dB/Hz)', ...
        'titleText', '', ...
        'doDB', 1);

plotFileName = sprintf('%s/allSessions-arrayResponseHoldRelPowerDB-pul-P3vsP1-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

% %% plot power in array response dPul P3 vs P1
% channelCond = isInDPulvinar;
% nChannel = sum(channelCond);
% arrayResponseHoldRelPowerLF = [arrayResponseHoldPowerP3LF(channelCond,:); arrayResponseHoldPowerP1LF(channelCond,:)] ./ ...
%         [baselinePowerLF(channelCond,:); baselinePowerLF(channelCond,:)];
% arrayResponseHoldRelPowerHF = [arrayResponseHoldPowerP3HF(channelCond,:); arrayResponseHoldPowerP1HF(channelCond,:)] ./ ...
%         [baselinePowerHF(channelCond,:); baselinePowerHF(channelCond,:)];
% p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];
% 
% grcPlotLfpPower2(arrayResponseHoldRelPowerLF, arrayResponseHoldRelPowerHF, fAxisLF, fAxisHF, p3p1Logical, ...
%         'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
%         'yBounds', [relPowYBounds; relPowYBounds], ...
%         'cols', [p3Col; p1Col], ...
%         'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
%         'ylabelText', 'Power Rel. to Baseline (dB/Hz)', ...
%         'titleText', '', ...
%         'doDB', 1);
% 
% plotFileName = sprintf('%s/allSessions-arrayResponseHoldRelPowerDB-dPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
% fprintf('Saving to %s...\n', plotFileName);
% export_fig(plotFileName, '-nocrop');
% 
% %% plot power in array response vPul P3 vs P1
% channelCond = isInVPulvinar;
% nChannel = sum(channelCond);
% arrayResponseHoldRelPowerLF = [arrayResponseHoldPowerP3LF(channelCond,:); arrayResponseHoldPowerP1LF(channelCond,:)] ./ ...
%         [baselinePowerLF(channelCond,:); baselinePowerLF(channelCond,:)];
% arrayResponseHoldRelPowerHF = [arrayResponseHoldPowerP3HF(channelCond,:); arrayResponseHoldPowerP1HF(channelCond,:)] ./ ...
%         [baselinePowerHF(channelCond,:); baselinePowerHF(channelCond,:)];
% p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];
% 
% grcPlotLfpPower2(arrayResponseHoldRelPowerLF, arrayResponseHoldRelPowerHF, fAxisLF, fAxisHF, p3p1Logical, ...
%         'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
%         'yBounds', [relPowYBounds; relPowYBounds], ...
%         'cols', [p3Col; p1Col], ...
%         'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
%         'ylabelText', 'Power Rel. to Baseline (dB/Hz)', ...
%         'titleText', '', ...
%         'doDB', 1);
% 
% plotFileName = sprintf('%s/allSessions-arrayResponseHoldRelPowerDB-vPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
% fprintf('Saving to %s...\n', plotFileName);
% export_fig(plotFileName, '-nocrop');

%% plot cue-target delay SFC dPul P3 vs P1 (relative to baseline is NOISY)
channelCond = isInDPulvinar;
nChannel = sum(channelCond);
cueTargetDelayRelSFCLF = [cueTargetDelaySFCP3LF(channelCond,:); cueTargetDelaySFCP1LF(channelCond,:)];
cueTargetDelayRelSFCHF = [cueTargetDelaySFCP3HF(channelCond,:); cueTargetDelaySFCP1HF(channelCond,:)];
p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];

grcPlotLfpPower2(cueTargetDelayRelSFCLF, cueTargetDelayRelSFCHF, fAxisLF, fAxisHF, p3p1Logical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-ctDelaySFC-dPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot cue-target delay SFC vPul P3 vs P1 (relative to baseline is NOISY)
channelCond = isInVPulvinar;
nChannel = sum(channelCond);
cueTargetDelayRelSFCLF = [cueTargetDelaySFCP3LF(channelCond,:); cueTargetDelaySFCP1LF(channelCond,:)];
cueTargetDelayRelSFCHF = [cueTargetDelaySFCP3HF(channelCond,:); cueTargetDelaySFCP1HF(channelCond,:)];
p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];

grcPlotLfpPower2(cueTargetDelayRelSFCLF, cueTargetDelayRelSFCHF, fAxisLF, fAxisHF, p3p1Logical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-ctDelaySFC-vPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot array response SFC dPul P3 vs P1 (relative to baseline is NOISY)
channelCond = isInDPulvinar;
nChannel = sum(channelCond);
arrayResponseHoldRelSFCLF = [arrayResponseHoldSFCP3LF(channelCond,:); arrayResponseHoldSFCP1LF(channelCond,:)];
arrayResponseHoldRelSFCHF = [arrayResponseHoldSFCP3HF(channelCond,:); arrayResponseHoldSFCP1HF(channelCond,:)];
p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];

grcPlotLfpPower2(arrayResponseHoldRelSFCLF, arrayResponseHoldRelSFCHF, fAxisLF, fAxisHF, p3p1Logical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-arrayResponseHoldSFC-dPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot array response SFC vPul P3 vs P1 (relative to baseline is NOISY)
channelCond = isInVPulvinar;
nChannel = sum(channelCond);
arrayResponseHoldRelSFCLF = [arrayResponseHoldSFCP3LF(channelCond,:); arrayResponseHoldSFCP1LF(channelCond,:)];
arrayResponseHoldRelSFCHF = [arrayResponseHoldSFCP3HF(channelCond,:); arrayResponseHoldSFCP1HF(channelCond,:)];
p3p1Logical = [true(nChannel, 1) false(nChannel, 1); false(nChannel, 1) true(nChannel, 1)];

grcPlotLfpPower2(arrayResponseHoldRelSFCLF, arrayResponseHoldRelSFCHF, fAxisLF, fAxisHF, p3p1Logical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-arrayResponseHoldSFC-vPul-P3vsP1-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot subdivision all pairs dPul spike - vPul field coherence across conditions and periods
nSubPairs = size(baselineSFCDPulSpikeVPulFieldLF, 1);
sfcAllLF = [cueTargetDelaySFCDPulSpikeVPulFieldP3LF; cueTargetDelaySFCDPulSpikeVPulFieldP1LF];
sfcAllHF = [cueTargetDelaySFCDPulSpikeVPulFieldP3HF; cueTargetDelaySFCDPulSpikeVPulFieldP1HF];
condLogical = false(nSubPairs * 2, 2);
for i = 1:2
    condLogical(((i-1)*nSubPairs+1):(i*nSubPairs), i) = 1;
end



grcPlotLfpPower2(sfcAllLF, sfcAllHF, fAxisLF, fAxisHF, condLogical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-dPulSpike-vPulField-ctDelaySFC-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot subdivision all pairs vPul spike - dPul field coherence across conditions and periods
nSubPairs = size(baselineSFCVPulSpikeDPulFieldLF, 1);
sfcAllLF = [cueTargetDelaySFCVPulSpikeDPulFieldP3LF; cueTargetDelaySFCVPulSpikeDPulFieldP1LF];
sfcAllHF = [cueTargetDelaySFCVPulSpikeDPulFieldP3HF; cueTargetDelaySFCVPulSpikeDPulFieldP1HF];
condLogical = false(nSubPairs * 2, 2);
for i = 1:2
    condLogical(((i-1)*nSubPairs+1):(i*nSubPairs), i) = 1;
end



grcPlotLfpPower2(sfcAllLF, sfcAllHF, fAxisLF, fAxisHF, condLogical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-vPulSpike-dPulField-ctDelaySFC-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot subdivision all pairs dPul spike - vPul field coherence across conditions and periods
nSubPairs = size(baselineSFCDPulSpikeVPulFieldLF, 1);
sfcAllLF = [arrayResponseHoldSFCDPulSpikeVPulFieldP3LF; arrayResponseHoldSFCDPulSpikeVPulFieldP1LF];
sfcAllHF = [arrayResponseHoldSFCDPulSpikeVPulFieldP3HF; arrayResponseHoldSFCDPulSpikeVPulFieldP1HF];
condLogical = false(nSubPairs * 2, 2);
for i = 1:2
    condLogical(((i-1)*nSubPairs+1):(i*nSubPairs), i) = 1;
end



grcPlotLfpPower2(sfcAllLF, sfcAllHF, fAxisLF, fAxisHF, condLogical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-dPulSpike-vPulField-arrayResponseHoldSFC-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');

%% plot subdivision all pairs vPul spike - dPul field coherence across conditions and periods
nSubPairs = size(baselineSFCVPulSpikeDPulFieldLF, 1);
sfcAllLF = [arrayResponseHoldSFCVPulSpikeDPulFieldP3LF; arrayResponseHoldSFCVPulSpikeDPulFieldP1LF];
sfcAllHF = [arrayResponseHoldSFCVPulSpikeDPulFieldP3HF; arrayResponseHoldSFCVPulSpikeDPulFieldP1HF];
condLogical = false(nSubPairs * 2, 2);
for i = 1:2
    condLogical(((i-1)*nSubPairs+1):(i*nSubPairs), i) = 1;
end



grcPlotLfpPower2(sfcAllLF, sfcAllHF, fAxisLF, fAxisHF, condLogical, ...
        'xBounds', [paramsLF.fpass; paramsHF.fpass(1) 80], ...
        'yBounds', [sfcCTDelayYBoundsLF; sfcCTDelayYBoundsHF], ...
        'cols', [p3Col; p1Col], ...
        'lineLabels', {'Attend-RF', 'Attend-Away'}, ...
        'ylabelText', 'Coherence', ...
        'titleText', '', ...
        'doDB', 0);

plotFileName = sprintf('%s/allSessions-vPulSpike-dPulField-arrayResponseHoldSFC-%s-v%d.png', outputDir, ref, v);
fprintf('Saving to %s...\n', plotFileName);
export_fig(plotFileName, '-nocrop');