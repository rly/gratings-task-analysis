function recordingInfo = readRecordingInfo(filename)

%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Ryan\Documents\MATLAB\gratings-task-analysis\recordingInfo.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/10/21 15:14:57

%% Initialize variables.
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: text (%q)
%	column2: text (%q)
%   column3: text (%q)
%	column4: text (%q)
%   column5: text (%q)
%	column6: text (%q)
%   column7: text (%q)
%	column8: text (%q)
%   column9: text (%q)
%	column10: text (%q)
%   column11: text (%q)
%   column12: text (%q)
%   column13: text (%q)
%   column14: text (%q)
%   column15: text (%q)
%   column16: text (%q)
%   column17: text (%q)
%   column18: text (%q)
%   column19: text (%q)
%   column20: text (%q)
%   column21: text (%q)
%   column22: text (%q)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
pl2FileName = dataArray{:, 1};
sessionName = dataArray{:, 2};
areaName = dataArray{:, 3};
blockNames = cellfun(@(x) strsplit(x, ', '), dataArray{:, 4}, 'UniformOutput', false);
gratingsTask3DIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 5}, 'UniformOutput', false);
gratingsTask3DLogIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 6}, 'UniformOutput', false);
gratingsTask0DIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 7}, 'UniformOutput', false);
gratingsTask0DLogIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 8}, 'UniformOutput', false);
vepmIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 9}, 'UniformOutput', false);
aepmIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 10}, 'UniformOutput', false);
rfmOldIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 11}, 'UniformOutput', false);
rfmEighthsIndices = cellfun(@(x) cellfun(@(y) str2double(y), strsplit(x, ', ')), dataArray{:, 12}, 'UniformOutput', false);
spikeChannelPrefix = dataArray{:, 13};
spikeChannelsToLoad = cellfun(@(x) eval(x), dataArray{:, 14}, 'UniformOutput', false); % warning: matlab injection security risk
muaChannelsToLoad = cellfun(@(x) eval(x), dataArray{:, 15}, 'UniformOutput', false); % warning: matlab injection security risk
lfpChannelsToLoad = cellfun(@(x) eval(x), dataArray{:, 16}, 'UniformOutput', false); % warning: matlab injection security risk
spkcChannelsToLoad = cellfun(@(x) eval(x), dataArray{:, 17}, 'UniformOutput', false); % warning: matlab injection security risk
directChannelsToLoad = cellfun(@(x) eval(x), dataArray{:, 18}, 'UniformOutput', false); % warning: matlab injection security risk
pldChannels = cellfun(@(x) eval(x), dataArray{:, 19}, 'UniformOutput', false); % warning: matlab injection security risk
plvChannels = cellfun(@(x) eval(x), dataArray{:, 20}, 'UniformOutput', false); % warning: matlab injection security risk
pmChannels = cellfun(@(x) eval(x), dataArray{:, 21}, 'UniformOutput', false); % warning: matlab injection security risk
piChannels = cellfun(@(x) eval(x), dataArray{:, 22}, 'UniformOutput', false); % warning: matlab injection security risk
vPulChannels = cellfun(@(x) eval(x), dataArray{:, 23}, 'UniformOutput', false); % warning: matlab injection security risk
dPulChannels = cellfun(@(x) eval(x), dataArray{:, 24}, 'UniformOutput', false); % warning: matlab injection security risk
notes = dataArray{:, 25};


%% Place vars into struct
info = [pl2FileName, sessionName, areaName, blockNames, gratingsTask3DIndices, ...
        gratingsTask3DLogIndices, gratingsTask0DIndices, gratingsTask0DLogIndices, ...
        vepmIndices, aepmIndices, rfmOldIndices, rfmEighthsIndices, spikeChannelPrefix, ...
        spikeChannelsToLoad, muaChannelsToLoad, lfpChannelsToLoad, spkcChannelsToLoad, directChannelsToLoad, ...
        pldChannels, plvChannels, pmChannels, piChannels, vPulChannels, dPulChannels];
headers = {'pl2FileName', 'sessionName', 'areaName', 'blockNames', 'gratingsTask3DIndices', ...
        'gratingsTask3DLogIndices', 'gratingsTask0DIndices', ...
        'gratingsTask0DLogIndices', 'vepmIndices', 'aepmIndices', 'rfmOldIndices', 'rfmEighthsIndices', 'spikeChannelPrefix', ...
        'spikeChannelsToLoad', 'muaChannelsToLoad', 'lfpChannelsToLoad', 'spkcChannelsToLoad', 'directChannelsToLoad', ...
        'pldChannels', 'plvChannels', 'pmChannels', 'piChannels', 'vPulChannels', 'dPulChannels'};
recordingInfo = cell2struct(info, headers, 2);

%% Sanity check
% just need to run this once on the whole file, not every time this script gets called
for i = 1:numel(recordingInfo)
    % check that all channel indices are part of spikeChannelsToLoad
    assert(all(ismember(dPulChannels{i}, spikeChannelsToLoad{i})));
    assert(all(ismember(vPulChannels{i}, spikeChannelsToLoad{i})));
    assert(all(ismember(pldChannels{i}, spikeChannelsToLoad{i})));
    assert(all(ismember(plvChannels{i}, spikeChannelsToLoad{i})));
    assert(all(ismember(pmChannels{i}, spikeChannelsToLoad{i})));
    assert(all(ismember(piChannels{i}, spikeChannelsToLoad{i})));
    
    assert(isempty(intersect(dPulChannels{i}, vPulChannels{i})))

    % check that task indices are all unique
    allBlockIndices = [gratingsTask3DIndices, gratingsTask0DIndices, vepmIndices, aepmIndices, rfmOldIndices, rfmEighthsIndices];
    allBlockIndices = horzcat(allBlockIndices{i,:});
    allBlockIndices(isnan(allBlockIndices)) = [];
    assert(numel(unique(allBlockIndices)) == numel(allBlockIndices));
    
    % check that task indices have the correct block name string pattern
    gValidIndices = [gratingsTask3DIndices{i}, gratingsTask0DIndices{i}];
    assert(sum(isnan(gratingsTask3DIndices{i})) == 0);
    gValidIndices(isnan(gValidIndices)) = [];
    rfmValidIndices = [rfmOldIndices{i}, rfmEighthsIndices{i}];
    rfmValidIndices(isnan(rfmValidIndices)) = [];
    vepmValidIndices = vepmIndices{i};
    assert(sum(isnan(vepmValidIndices)) == 0);
    aepmValidIndices = aepmIndices{i};
    aepmValidIndices(isnan(aepmValidIndices)) = [];
    assert(all(ismember(gValidIndices, find(cellfun(@(x) ~isempty(regexp(x, 'g\d', 'ONCE')), blockNames{i,:})))));
    assert(all(ismember(vepmValidIndices, find(cellfun(@(x) ~isempty(regexp(x, 'vepm\d', 'ONCE')), blockNames{i,:})))));
    assert(all(ismember(aepmValidIndices, find(cellfun(@(x) ~isempty(regexp(x, 'aepm\d', 'ONCE')), blockNames{i,:})))));
    assert(all(ismember(rfmValidIndices, find(cellfun(@(x) ~isempty(regexp(x, 'rfm\d', 'ONCE')), blockNames{i,:})))));
end
